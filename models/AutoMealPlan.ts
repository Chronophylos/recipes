/* tslint:disable */
/* eslint-disable */
/**
 * Tandoor
 * Tandoor API Docs
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface AutoMealPlan
 */
export interface AutoMealPlan {
    /**
     * 
     * @type {Date}
     * @memberof AutoMealPlan
     */
    startDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof AutoMealPlan
     */
    endDate: Date;
    /**
     * 
     * @type {number}
     * @memberof AutoMealPlan
     */
    mealTypeId: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof AutoMealPlan
     */
    keywordIds: Array<any>;
    /**
     * 
     * @type {number}
     * @memberof AutoMealPlan
     */
    servings: number;
    /**
     * 
     * @type {Array<User>}
     * @memberof AutoMealPlan
     */
    shared?: Array<User> | null;
    /**
     * 
     * @type {boolean}
     * @memberof AutoMealPlan
     */
    addshopping: boolean;
}

/**
 * Check if a given object implements the AutoMealPlan interface.
 */
export function instanceOfAutoMealPlan(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "startDate" in value;
    isInstance = isInstance && "endDate" in value;
    isInstance = isInstance && "mealTypeId" in value;
    isInstance = isInstance && "keywordIds" in value;
    isInstance = isInstance && "servings" in value;
    isInstance = isInstance && "addshopping" in value;

    return isInstance;
}

export function AutoMealPlanFromJSON(json: any): AutoMealPlan {
    return AutoMealPlanFromJSONTyped(json, false);
}

export function AutoMealPlanFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutoMealPlan {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'startDate': (new Date(json['start_date'])),
        'endDate': (new Date(json['end_date'])),
        'mealTypeId': json['meal_type_id'],
        'keywordIds': json['keyword_ids'],
        'servings': json['servings'],
        'shared': !exists(json, 'shared') ? undefined : (json['shared'] === null ? null : (json['shared'] as Array<any>).map(UserFromJSON)),
        'addshopping': json['addshopping'],
    };
}

export function AutoMealPlanToJSON(value?: AutoMealPlan | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'start_date': (value.startDate.toISOString().substr(0,10)),
        'end_date': (value.endDate.toISOString().substr(0,10)),
        'meal_type_id': value.mealTypeId,
        'keyword_ids': value.keywordIds,
        'servings': value.servings,
        'shared': value.shared === undefined ? undefined : (value.shared === null ? null : (value.shared as Array<any>).map(UserToJSON)),
        'addshopping': value.addshopping,
    };
}

