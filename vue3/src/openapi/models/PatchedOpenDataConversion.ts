/* tslint:disable */
/* eslint-disable */
/**
 * Tandoor
 * Tandoor API Docs
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OpenDataFood,
    OpenDataFoodFromJSON,
    OpenDataFoodFromJSONTyped,
    OpenDataFoodToJSON,
    OpenDataUnit,
    OpenDataUnitFromJSON,
    OpenDataUnitFromJSONTyped,
    OpenDataUnitToJSON,
    OpenDataVersion,
    OpenDataVersionFromJSON,
    OpenDataVersionFromJSONTyped,
    OpenDataVersionToJSON,
} from './';

/**
 * Adds nested create feature
 * @export
 * @interface PatchedOpenDataConversion
 */
export interface PatchedOpenDataConversion {
    /**
     * 
     * @type {number}
     * @memberof PatchedOpenDataConversion
     */
    readonly id?: number;
    /**
     * 
     * @type {OpenDataVersion}
     * @memberof PatchedOpenDataConversion
     */
    version?: OpenDataVersion;
    /**
     * 
     * @type {string}
     * @memberof PatchedOpenDataConversion
     */
    slug?: string;
    /**
     * 
     * @type {OpenDataFood}
     * @memberof PatchedOpenDataConversion
     */
    food?: OpenDataFood;
    /**
     * 
     * @type {string}
     * @memberof PatchedOpenDataConversion
     */
    baseAmount?: string;
    /**
     * 
     * @type {OpenDataUnit}
     * @memberof PatchedOpenDataConversion
     */
    baseUnit?: OpenDataUnit;
    /**
     * 
     * @type {string}
     * @memberof PatchedOpenDataConversion
     */
    convertedAmount?: string;
    /**
     * 
     * @type {OpenDataUnit}
     * @memberof PatchedOpenDataConversion
     */
    convertedUnit?: OpenDataUnit;
    /**
     * 
     * @type {string}
     * @memberof PatchedOpenDataConversion
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOpenDataConversion
     */
    comment?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOpenDataConversion
     */
    readonly createdBy?: string;
}

export function PatchedOpenDataConversionFromJSON(json: any): PatchedOpenDataConversion {
    return PatchedOpenDataConversionFromJSONTyped(json, false);
}

export function PatchedOpenDataConversionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedOpenDataConversion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'version': !exists(json, 'version') ? undefined : OpenDataVersionFromJSON(json['version']),
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'food': !exists(json, 'food') ? undefined : OpenDataFoodFromJSON(json['food']),
        'baseAmount': !exists(json, 'base_amount') ? undefined : json['base_amount'],
        'baseUnit': !exists(json, 'base_unit') ? undefined : OpenDataUnitFromJSON(json['base_unit']),
        'convertedAmount': !exists(json, 'converted_amount') ? undefined : json['converted_amount'],
        'convertedUnit': !exists(json, 'converted_unit') ? undefined : OpenDataUnitFromJSON(json['converted_unit']),
        'source': !exists(json, 'source') ? undefined : json['source'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'createdBy': !exists(json, 'created_by') ? undefined : json['created_by'],
    };
}

export function PatchedOpenDataConversionToJSON(value?: PatchedOpenDataConversion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': OpenDataVersionToJSON(value.version),
        'slug': value.slug,
        'food': OpenDataFoodToJSON(value.food),
        'base_amount': value.baseAmount,
        'base_unit': OpenDataUnitToJSON(value.baseUnit),
        'converted_amount': value.convertedAmount,
        'converted_unit': OpenDataUnitToJSON(value.convertedUnit),
        'source': value.source,
        'comment': value.comment,
    };
}


