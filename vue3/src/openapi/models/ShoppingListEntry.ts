/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Food } from './Food';
import {
    FoodFromJSON,
    FoodFromJSONTyped,
    FoodToJSON,
} from './Food';
import type { ShoppingListRecipe } from './ShoppingListRecipe';
import {
    ShoppingListRecipeFromJSON,
    ShoppingListRecipeFromJSONTyped,
    ShoppingListRecipeToJSON,
} from './ShoppingListRecipe';
import type { Unit } from './Unit';
import {
    UnitFromJSON,
    UnitFromJSONTyped,
    UnitToJSON,
} from './Unit';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * Adds nested create feature
 * @export
 * @interface ShoppingListEntry
 */
export interface ShoppingListEntry {
    /**
     * 
     * @type {number}
     * @memberof ShoppingListEntry
     */
    readonly id: number;
    /**
     * 
     * @type {number}
     * @memberof ShoppingListEntry
     */
    listRecipe?: number | null;
    /**
     * 
     * @type {Food}
     * @memberof ShoppingListEntry
     */
    food: Food | null;
    /**
     * 
     * @type {Unit}
     * @memberof ShoppingListEntry
     */
    unit?: Unit | null;
    /**
     * 
     * @type {string}
     * @memberof ShoppingListEntry
     */
    amount: string;
    /**
     * 
     * @type {number}
     * @memberof ShoppingListEntry
     */
    order?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ShoppingListEntry
     */
    checked?: boolean;
    /**
     * 
     * @type {ShoppingListRecipe}
     * @memberof ShoppingListEntry
     */
    readonly recipeMealplan: ShoppingListRecipe;
    /**
     * 
     * @type {User}
     * @memberof ShoppingListEntry
     */
    readonly createdBy: User;
    /**
     * 
     * @type {Date}
     * @memberof ShoppingListEntry
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ShoppingListEntry
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ShoppingListEntry
     */
    completedAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof ShoppingListEntry
     */
    delayUntil?: Date | null;
}

/**
 * Check if a given object implements the ShoppingListEntry interface.
 */
export function instanceOfShoppingListEntry(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "food" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "recipeMealplan" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function ShoppingListEntryFromJSON(json: any): ShoppingListEntry {
    return ShoppingListEntryFromJSONTyped(json, false);
}

export function ShoppingListEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShoppingListEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'listRecipe': !exists(json, 'list_recipe') ? undefined : json['list_recipe'],
        'food': FoodFromJSON(json['food']),
        'unit': !exists(json, 'unit') ? undefined : UnitFromJSON(json['unit']),
        'amount': json['amount'],
        'order': !exists(json, 'order') ? undefined : json['order'],
        'checked': !exists(json, 'checked') ? undefined : json['checked'],
        'recipeMealplan': ShoppingListRecipeFromJSON(json['recipe_mealplan']),
        'createdBy': UserFromJSON(json['created_by']),
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'completedAt': !exists(json, 'completed_at') ? undefined : (json['completed_at'] === null ? null : new Date(json['completed_at'])),
        'delayUntil': !exists(json, 'delay_until') ? undefined : (json['delay_until'] === null ? null : new Date(json['delay_until'])),
    };
}

export function ShoppingListEntryToJSON(value?: ShoppingListEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'list_recipe': value.listRecipe,
        'food': FoodToJSON(value.food),
        'unit': UnitToJSON(value.unit),
        'amount': value.amount,
        'order': value.order,
        'checked': value.checked,
        'completed_at': value.completedAt === undefined ? undefined : (value.completedAt === null ? null : value.completedAt.toISOString()),
        'delay_until': value.delayUntil === undefined ? undefined : (value.delayUntil === null ? null : value.delayUntil.toISOString()),
    };
}

