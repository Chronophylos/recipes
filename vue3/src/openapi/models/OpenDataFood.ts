/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OpenDataCategory } from './OpenDataCategory';
import {
    OpenDataCategoryFromJSON,
    OpenDataCategoryFromJSONTyped,
    OpenDataCategoryToJSON,
} from './OpenDataCategory';
import type { OpenDataFoodProperty } from './OpenDataFoodProperty';
import {
    OpenDataFoodPropertyFromJSON,
    OpenDataFoodPropertyFromJSONTyped,
    OpenDataFoodPropertyToJSON,
} from './OpenDataFoodProperty';
import type { OpenDataUnit } from './OpenDataUnit';
import {
    OpenDataUnitFromJSON,
    OpenDataUnitFromJSONTyped,
    OpenDataUnitToJSON,
} from './OpenDataUnit';
import type { OpenDataVersion } from './OpenDataVersion';
import {
    OpenDataVersionFromJSON,
    OpenDataVersionFromJSONTyped,
    OpenDataVersionToJSON,
} from './OpenDataVersion';

/**
 * Moves `UniqueValidator`'s from the validation stage to the save stage.
 * It solves the problem with nested validation for unique fields on update.
 * 
 * If you want more details, you can read related issues and articles:
 * https://github.com/beda-software/drf-writable-nested/issues/1
 * http://www.django-rest-framework.org/api-guide/validators/#updating-nested-serializers
 * 
 * Example of usage:
 * ```
 *     class Child(models.Model):
 *     field = models.CharField(unique=True)
 * 
 * 
 * class Parent(models.Model):
 *     child = models.ForeignKey('Child')
 * 
 * 
 * class ChildSerializer(UniqueFieldsMixin, serializers.ModelSerializer):
 *     class Meta:
 *         model = Child
 * 
 * 
 * class ParentSerializer(NestedUpdateMixin, serializers.ModelSerializer):
 *     child = ChildSerializer()
 * 
 *     class Meta:
 *         model = Parent
 * ```
 * 
 * Note: `UniqueFieldsMixin` must be applied only on the serializer
 * which has unique fields.
 * 
 * Note: When you are using both mixins
 * (`UniqueFieldsMixin` and `NestedCreateMixin` or `NestedUpdateMixin`)
 * you should put `UniqueFieldsMixin` ahead.
 * @export
 * @interface OpenDataFood
 */
export interface OpenDataFood {
    /**
     * 
     * @type {number}
     * @memberof OpenDataFood
     */
    readonly id: number;
    /**
     * 
     * @type {OpenDataVersion}
     * @memberof OpenDataFood
     */
    version: OpenDataVersion;
    /**
     * 
     * @type {string}
     * @memberof OpenDataFood
     */
    slug: string;
    /**
     * 
     * @type {string}
     * @memberof OpenDataFood
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof OpenDataFood
     */
    pluralName: string;
    /**
     * 
     * @type {OpenDataCategory}
     * @memberof OpenDataFood
     */
    storeCategory: OpenDataCategory;
    /**
     * 
     * @type {OpenDataUnit}
     * @memberof OpenDataFood
     */
    preferredUnitMetric?: OpenDataUnit | null;
    /**
     * 
     * @type {OpenDataUnit}
     * @memberof OpenDataFood
     */
    preferredShoppingUnitMetric?: OpenDataUnit | null;
    /**
     * 
     * @type {OpenDataUnit}
     * @memberof OpenDataFood
     */
    preferredUnitImperial?: OpenDataUnit | null;
    /**
     * 
     * @type {OpenDataUnit}
     * @memberof OpenDataFood
     */
    preferredShoppingUnitImperial?: OpenDataUnit | null;
    /**
     * 
     * @type {Array<OpenDataFoodProperty>}
     * @memberof OpenDataFood
     */
    properties: Array<OpenDataFoodProperty> | null;
    /**
     * 
     * @type {number}
     * @memberof OpenDataFood
     */
    propertiesFoodAmount?: number;
    /**
     * 
     * @type {OpenDataUnit}
     * @memberof OpenDataFood
     */
    propertiesFoodUnit: OpenDataUnit;
    /**
     * 
     * @type {string}
     * @memberof OpenDataFood
     */
    propertiesSource?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenDataFood
     */
    fdcId: string;
    /**
     * 
     * @type {string}
     * @memberof OpenDataFood
     */
    comment?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenDataFood
     */
    readonly createdBy: string;
}

/**
 * Check if a given object implements the OpenDataFood interface.
 */
export function instanceOfOpenDataFood(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "pluralName" in value;
    isInstance = isInstance && "storeCategory" in value;
    isInstance = isInstance && "properties" in value;
    isInstance = isInstance && "propertiesFoodUnit" in value;
    isInstance = isInstance && "fdcId" in value;
    isInstance = isInstance && "createdBy" in value;

    return isInstance;
}

export function OpenDataFoodFromJSON(json: any): OpenDataFood {
    return OpenDataFoodFromJSONTyped(json, false);
}

export function OpenDataFoodFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenDataFood {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'version': OpenDataVersionFromJSON(json['version']),
        'slug': json['slug'],
        'name': json['name'],
        'pluralName': json['plural_name'],
        'storeCategory': OpenDataCategoryFromJSON(json['store_category']),
        'preferredUnitMetric': !exists(json, 'preferred_unit_metric') ? undefined : OpenDataUnitFromJSON(json['preferred_unit_metric']),
        'preferredShoppingUnitMetric': !exists(json, 'preferred_shopping_unit_metric') ? undefined : OpenDataUnitFromJSON(json['preferred_shopping_unit_metric']),
        'preferredUnitImperial': !exists(json, 'preferred_unit_imperial') ? undefined : OpenDataUnitFromJSON(json['preferred_unit_imperial']),
        'preferredShoppingUnitImperial': !exists(json, 'preferred_shopping_unit_imperial') ? undefined : OpenDataUnitFromJSON(json['preferred_shopping_unit_imperial']),
        'properties': (json['properties'] === null ? null : (json['properties'] as Array<any>).map(OpenDataFoodPropertyFromJSON)),
        'propertiesFoodAmount': !exists(json, 'properties_food_amount') ? undefined : json['properties_food_amount'],
        'propertiesFoodUnit': OpenDataUnitFromJSON(json['properties_food_unit']),
        'propertiesSource': !exists(json, 'properties_source') ? undefined : json['properties_source'],
        'fdcId': json['fdc_id'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'createdBy': json['created_by'],
    };
}

export function OpenDataFoodToJSON(value?: OpenDataFood | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': OpenDataVersionToJSON(value.version),
        'slug': value.slug,
        'name': value.name,
        'plural_name': value.pluralName,
        'store_category': OpenDataCategoryToJSON(value.storeCategory),
        'preferred_unit_metric': OpenDataUnitToJSON(value.preferredUnitMetric),
        'preferred_shopping_unit_metric': OpenDataUnitToJSON(value.preferredShoppingUnitMetric),
        'preferred_unit_imperial': OpenDataUnitToJSON(value.preferredUnitImperial),
        'preferred_shopping_unit_imperial': OpenDataUnitToJSON(value.preferredShoppingUnitImperial),
        'properties': (value.properties === null ? null : (value.properties as Array<any>).map(OpenDataFoodPropertyToJSON)),
        'properties_food_amount': value.propertiesFoodAmount,
        'properties_food_unit': OpenDataUnitToJSON(value.propertiesFoodUnit),
        'properties_source': value.propertiesSource,
        'fdc_id': value.fdcId,
        'comment': value.comment,
    };
}

