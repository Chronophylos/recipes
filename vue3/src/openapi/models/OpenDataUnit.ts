/* tslint:disable */
/* eslint-disable */
/**
 * Tandoor
 * Tandoor API Docs
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BaseUnitEnum,
    BaseUnitEnumFromJSON,
    BaseUnitEnumFromJSONTyped,
    BaseUnitEnumToJSON,
    BlankEnum,
    BlankEnumFromJSON,
    BlankEnumFromJSONTyped,
    BlankEnumToJSON,
    OpenDataUnitTypeEnum,
    OpenDataUnitTypeEnumFromJSON,
    OpenDataUnitTypeEnumFromJSONTyped,
    OpenDataUnitTypeEnumToJSON,
    OpenDataVersion,
    OpenDataVersionFromJSON,
    OpenDataVersionFromJSONTyped,
    OpenDataVersionToJSON,
} from './';

/**
 * Moves `UniqueValidator`'s from the validation stage to the save stage.
It solves the problem with nested validation for unique fields on update.

If you want more details, you can read related issues and articles:
https://github.com/beda-software/drf-writable-nested/issues/1
http://www.django-rest-framework.org/api-guide/validators/#updating-nested-serializers

Example of usage:
```
    class Child(models.Model):
    field = models.CharField(unique=True)


class Parent(models.Model):
    child = models.ForeignKey('Child')


class ChildSerializer(UniqueFieldsMixin, serializers.ModelSerializer):
    class Meta:
        model = Child


class ParentSerializer(NestedUpdateMixin, serializers.ModelSerializer):
    child = ChildSerializer()

    class Meta:
        model = Parent
```

Note: `UniqueFieldsMixin` must be applied only on the serializer
which has unique fields.

Note: When you are using both mixins
(`UniqueFieldsMixin` and `NestedCreateMixin` or `NestedUpdateMixin`)
you should put `UniqueFieldsMixin` ahead.
 * @export
 * @interface OpenDataUnit
 */
export interface OpenDataUnit {
    /**
     * 
     * @type {number}
     * @memberof OpenDataUnit
     */
    readonly id: number;
    /**
     * 
     * @type {OpenDataVersion}
     * @memberof OpenDataUnit
     */
    version: OpenDataVersion;
    /**
     * 
     * @type {string}
     * @memberof OpenDataUnit
     */
    slug: string;
    /**
     * 
     * @type {string}
     * @memberof OpenDataUnit
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof OpenDataUnit
     */
    pluralName?: string;
    /**
     * 
     * @type {BaseUnitEnum | BlankEnum}
     * @memberof OpenDataUnit
     */
    baseUnit?: BaseUnitEnum | BlankEnum;
    /**
     * 
     * @type {OpenDataUnitTypeEnum}
     * @memberof OpenDataUnit
     */
    type: OpenDataUnitTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OpenDataUnit
     */
    comment?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenDataUnit
     */
    readonly createdBy: string;
}

export function OpenDataUnitFromJSON(json: any): OpenDataUnit {
    return OpenDataUnitFromJSONTyped(json, false);
}

export function OpenDataUnitFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenDataUnit {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'version': OpenDataVersionFromJSON(json['version']),
        'slug': json['slug'],
        'name': json['name'],
        'pluralName': !exists(json, 'plural_name') ? undefined : json['plural_name'],
        'baseUnit': !exists(json, 'base_unit') ? undefined : BaseUnitEnum | BlankEnumFromJSON(json['base_unit']),
        'type': OpenDataUnitTypeEnumFromJSON(json['type']),
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'createdBy': json['created_by'],
    };
}

export function OpenDataUnitToJSON(value?: OpenDataUnit | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': OpenDataVersionToJSON(value.version),
        'slug': value.slug,
        'name': value.name,
        'plural_name': value.pluralName,
        'base_unit': BaseUnitEnum | BlankEnumToJSON(value.baseUnit),
        'type': OpenDataUnitTypeEnumToJSON(value.type),
        'comment': value.comment,
    };
}


