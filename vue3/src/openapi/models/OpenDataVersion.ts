/* tslint:disable */
/* eslint-disable */
/**
 * Django Recipes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OpenDataVersion
 */
export interface OpenDataVersion {
    /**
     * 
     * @type {number}
     * @memberof OpenDataVersion
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof OpenDataVersion
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof OpenDataVersion
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof OpenDataVersion
     */
    comment?: string;
}

/**
 * Check if a given object implements the OpenDataVersion interface.
 */
export function instanceOfOpenDataVersion(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "code" in value;

    return isInstance;
}

export function OpenDataVersionFromJSON(json: any): OpenDataVersion {
    return OpenDataVersionFromJSONTyped(json, false);
}

export function OpenDataVersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenDataVersion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'code': json['code'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
    };
}

export function OpenDataVersionToJSON(value?: OpenDataVersion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'code': value.code,
        'comment': value.comment,
    };
}

