/* tslint:disable */
/* eslint-disable */
/**
 * Tandoor
 * Tandoor API Docs
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Moves `UniqueValidator`'s from the validation stage to the save stage.
It solves the problem with nested validation for unique fields on update.

If you want more details, you can read related issues and articles:
https://github.com/beda-software/drf-writable-nested/issues/1
http://www.django-rest-framework.org/api-guide/validators/#updating-nested-serializers

Example of usage:
```
    class Child(models.Model):
    field = models.CharField(unique=True)


class Parent(models.Model):
    child = models.ForeignKey('Child')


class ChildSerializer(UniqueFieldsMixin, serializers.ModelSerializer):
    class Meta:
        model = Child


class ParentSerializer(NestedUpdateMixin, serializers.ModelSerializer):
    child = ChildSerializer()

    class Meta:
        model = Parent
```

Note: `UniqueFieldsMixin` must be applied only on the serializer
which has unique fields.

Note: When you are using both mixins
(`UniqueFieldsMixin` and `NestedCreateMixin` or `NestedUpdateMixin`)
you should put `UniqueFieldsMixin` ahead.
 * @export
 * @interface PatchedKeyword
 */
export interface PatchedKeyword {
    /**
     * 
     * @type {number}
     * @memberof PatchedKeyword
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedKeyword
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedKeyword
     */
    readonly label?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedKeyword
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedKeyword
     */
    readonly parent?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedKeyword
     */
    readonly numchild?: number;
    /**
     * 
     * @type {Date}
     * @memberof PatchedKeyword
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedKeyword
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof PatchedKeyword
     */
    readonly fullName?: string;
}

export function PatchedKeywordFromJSON(json: any): PatchedKeyword {
    return PatchedKeywordFromJSONTyped(json, false);
}

export function PatchedKeywordFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedKeyword {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'parent': !exists(json, 'parent') ? undefined : json['parent'],
        'numchild': !exists(json, 'numchild') ? undefined : json['numchild'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'fullName': !exists(json, 'full_name') ? undefined : json['full_name'],
    };
}

export function PatchedKeywordToJSON(value?: PatchedKeyword | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
    };
}


