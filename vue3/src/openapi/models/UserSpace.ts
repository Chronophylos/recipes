/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Group } from './Group';
import {
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
} from './Group';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * Adds nested create feature
 * @export
 * @interface UserSpace
 */
export interface UserSpace {
    /**
     * 
     * @type {number}
     * @memberof UserSpace
     */
    readonly id: number;
    /**
     * 
     * @type {User}
     * @memberof UserSpace
     */
    readonly user: User;
    /**
     * 
     * @type {number}
     * @memberof UserSpace
     */
    readonly space: number;
    /**
     * 
     * @type {Array<Group>}
     * @memberof UserSpace
     */
    groups: Array<Group>;
    /**
     * 
     * @type {boolean}
     * @memberof UserSpace
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserSpace
     */
    internalNote?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserSpace
     */
    readonly inviteLink: number | null;
    /**
     * 
     * @type {Date}
     * @memberof UserSpace
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserSpace
     */
    readonly updatedAt: Date;
}

/**
 * Check if a given object implements the UserSpace interface.
 */
export function instanceOfUserSpace(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "space" in value;
    isInstance = isInstance && "groups" in value;
    isInstance = isInstance && "inviteLink" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function UserSpaceFromJSON(json: any): UserSpace {
    return UserSpaceFromJSONTyped(json, false);
}

export function UserSpaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSpace {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'user': UserFromJSON(json['user']),
        'space': json['space'],
        'groups': ((json['groups'] as Array<any>).map(GroupFromJSON)),
        'active': !exists(json, 'active') ? undefined : json['active'],
        'internalNote': !exists(json, 'internal_note') ? undefined : json['internal_note'],
        'inviteLink': json['invite_link'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function UserSpaceToJSON(value?: UserSpace | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'groups': ((value.groups as Array<any>).map(GroupToJSON)),
        'active': value.active,
        'internal_note': value.internalNote,
    };
}

