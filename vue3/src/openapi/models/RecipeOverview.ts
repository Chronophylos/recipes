/* tslint:disable */
/* eslint-disable */
/**
 * Tandoor
 * Tandoor API Docs
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { KeywordLabel } from './KeywordLabel';
import {
    KeywordLabelFromJSON,
    KeywordLabelFromJSONTyped,
    KeywordLabelToJSON,
} from './KeywordLabel';

/**
 * Adds nested create feature
 * @export
 * @interface RecipeOverview
 */
export interface RecipeOverview {
    /**
     * 
     * @type {number}
     * @memberof RecipeOverview
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof RecipeOverview
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RecipeOverview
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipeOverview
     */
    readonly image: string | null;
    /**
     * 
     * @type {Array<KeywordLabel>}
     * @memberof RecipeOverview
     */
    keywords: Array<KeywordLabel>;
    /**
     * 
     * @type {number}
     * @memberof RecipeOverview
     */
    workingTime?: number;
    /**
     * 
     * @type {number}
     * @memberof RecipeOverview
     */
    waitingTime?: number;
    /**
     * 
     * @type {number}
     * @memberof RecipeOverview
     */
    readonly createdBy: number;
    /**
     * 
     * @type {Date}
     * @memberof RecipeOverview
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof RecipeOverview
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {boolean}
     * @memberof RecipeOverview
     */
    internal?: boolean;
    /**
     * 
     * @type {number}
     * @memberof RecipeOverview
     */
    servings?: number;
    /**
     * 
     * @type {string}
     * @memberof RecipeOverview
     */
    servingsText?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipeOverview
     */
    rating?: string;
    /**
     * 
     * @type {Date}
     * @memberof RecipeOverview
     */
    lastCooked?: Date;
    /**
     * 
     * @type {string}
     * @memberof RecipeOverview
     */
    readonly _new: string;
    /**
     * 
     * @type {string}
     * @memberof RecipeOverview
     */
    readonly recent: string;
}

/**
 * Check if a given object implements the RecipeOverview interface.
 */
export function instanceOfRecipeOverview(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('name' in value)) return false;
    if (!('image' in value)) return false;
    if (!('keywords' in value)) return false;
    if (!('createdBy' in value)) return false;
    if (!('createdAt' in value)) return false;
    if (!('updatedAt' in value)) return false;
    if (!('_new' in value)) return false;
    if (!('recent' in value)) return false;
    return true;
}

export function RecipeOverviewFromJSON(json: any): RecipeOverview {
    return RecipeOverviewFromJSONTyped(json, false);
}

export function RecipeOverviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecipeOverview {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'image': json['image'],
        'keywords': ((json['keywords'] as Array<any>).map(KeywordLabelFromJSON)),
        'workingTime': json['working_time'] == null ? undefined : json['working_time'],
        'waitingTime': json['waiting_time'] == null ? undefined : json['waiting_time'],
        'createdBy': json['created_by'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'internal': json['internal'] == null ? undefined : json['internal'],
        'servings': json['servings'] == null ? undefined : json['servings'],
        'servingsText': json['servings_text'] == null ? undefined : json['servings_text'],
        'rating': json['rating'] == null ? undefined : json['rating'],
        'lastCooked': json['last_cooked'] == null ? undefined : (new Date(json['last_cooked'])),
        '_new': json['new'],
        'recent': json['recent'],
    };
}

export function RecipeOverviewToJSON(value?: RecipeOverview | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'description': value['description'],
        'keywords': ((value['keywords'] as Array<any>).map(KeywordLabelToJSON)),
        'working_time': value['workingTime'],
        'waiting_time': value['waitingTime'],
        'internal': value['internal'],
        'servings': value['servings'],
        'servings_text': value['servingsText'],
        'rating': value['rating'],
        'last_cooked': value['lastCooked'] == null ? undefined : ((value['lastCooked'] as any).toISOString()),
    };
}

