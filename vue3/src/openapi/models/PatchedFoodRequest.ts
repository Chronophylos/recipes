/* tslint:disable */
/* eslint-disable */
/**
 * Tandoor
 * Tandoor API Docs
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FoodInheritFieldRequest } from './FoodInheritFieldRequest';
import {
    FoodInheritFieldRequestFromJSON,
    FoodInheritFieldRequestFromJSONTyped,
    FoodInheritFieldRequestToJSON,
} from './FoodInheritFieldRequest';
import type { FoodSimpleRequest } from './FoodSimpleRequest';
import {
    FoodSimpleRequestFromJSON,
    FoodSimpleRequestFromJSONTyped,
    FoodSimpleRequestToJSON,
} from './FoodSimpleRequest';
import type { PropertyRequest } from './PropertyRequest';
import {
    PropertyRequestFromJSON,
    PropertyRequestFromJSONTyped,
    PropertyRequestToJSON,
} from './PropertyRequest';
import type { RecipeSimpleRequest } from './RecipeSimpleRequest';
import {
    RecipeSimpleRequestFromJSON,
    RecipeSimpleRequestFromJSONTyped,
    RecipeSimpleRequestToJSON,
} from './RecipeSimpleRequest';
import type { SupermarketCategoryRequest } from './SupermarketCategoryRequest';
import {
    SupermarketCategoryRequestFromJSON,
    SupermarketCategoryRequestFromJSONTyped,
    SupermarketCategoryRequestToJSON,
} from './SupermarketCategoryRequest';
import type { UnitRequest } from './UnitRequest';
import {
    UnitRequestFromJSON,
    UnitRequestFromJSONTyped,
    UnitRequestToJSON,
} from './UnitRequest';

/**
 * Moves `UniqueValidator`'s from the validation stage to the save stage.
 * It solves the problem with nested validation for unique fields on update.
 * 
 * If you want more details, you can read related issues and articles:
 * https://github.com/beda-software/drf-writable-nested/issues/1
 * http://www.django-rest-framework.org/api-guide/validators/#updating-nested-serializers
 * 
 * Example of usage:
 * ```
 *     class Child(models.Model):
 *     field = models.CharField(unique=True)
 * 
 * 
 * class Parent(models.Model):
 *     child = models.ForeignKey('Child')
 * 
 * 
 * class ChildSerializer(UniqueFieldsMixin, serializers.ModelSerializer):
 *     class Meta:
 *         model = Child
 * 
 * 
 * class ParentSerializer(NestedUpdateMixin, serializers.ModelSerializer):
 *     child = ChildSerializer()
 * 
 *     class Meta:
 *         model = Parent
 * ```
 * 
 * Note: `UniqueFieldsMixin` must be applied only on the serializer
 * which has unique fields.
 * 
 * Note: When you are using both mixins
 * (`UniqueFieldsMixin` and `NestedCreateMixin` or `NestedUpdateMixin`)
 * you should put `UniqueFieldsMixin` ahead.
 * @export
 * @interface PatchedFoodRequest
 */
export interface PatchedFoodRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedFoodRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedFoodRequest
     */
    pluralName?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedFoodRequest
     */
    description?: string;
    /**
     * 
     * @type {RecipeSimpleRequest}
     * @memberof PatchedFoodRequest
     */
    recipe?: RecipeSimpleRequest;
    /**
     * 
     * @type {string}
     * @memberof PatchedFoodRequest
     */
    url?: string;
    /**
     * 
     * @type {Array<PropertyRequest>}
     * @memberof PatchedFoodRequest
     */
    properties?: Array<PropertyRequest>;
    /**
     * 
     * @type {string}
     * @memberof PatchedFoodRequest
     */
    propertiesFoodAmount?: string;
    /**
     * 
     * @type {UnitRequest}
     * @memberof PatchedFoodRequest
     */
    propertiesFoodUnit?: UnitRequest;
    /**
     * 
     * @type {number}
     * @memberof PatchedFoodRequest
     */
    fdcId?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedFoodRequest
     */
    foodOnhand?: string;
    /**
     * 
     * @type {SupermarketCategoryRequest}
     * @memberof PatchedFoodRequest
     */
    supermarketCategory?: SupermarketCategoryRequest;
    /**
     * 
     * @type {Array<FoodInheritFieldRequest>}
     * @memberof PatchedFoodRequest
     */
    inheritFields?: Array<FoodInheritFieldRequest>;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedFoodRequest
     */
    ignoreShopping?: boolean;
    /**
     * 
     * @type {Array<FoodSimpleRequest>}
     * @memberof PatchedFoodRequest
     */
    substitute?: Array<FoodSimpleRequest>;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedFoodRequest
     */
    substituteSiblings?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedFoodRequest
     */
    substituteChildren?: boolean;
    /**
     * 
     * @type {Array<FoodInheritFieldRequest>}
     * @memberof PatchedFoodRequest
     */
    childInheritFields?: Array<FoodInheritFieldRequest>;
    /**
     * 
     * @type {string}
     * @memberof PatchedFoodRequest
     */
    openDataSlug?: string;
}

/**
 * Check if a given object implements the PatchedFoodRequest interface.
 */
export function instanceOfPatchedFoodRequest(value: object): boolean {
    return true;
}

export function PatchedFoodRequestFromJSON(json: any): PatchedFoodRequest {
    return PatchedFoodRequestFromJSONTyped(json, false);
}

export function PatchedFoodRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedFoodRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'pluralName': json['plural_name'] == null ? undefined : json['plural_name'],
        'description': json['description'] == null ? undefined : json['description'],
        'recipe': json['recipe'] == null ? undefined : RecipeSimpleRequestFromJSON(json['recipe']),
        'url': json['url'] == null ? undefined : json['url'],
        'properties': json['properties'] == null ? undefined : ((json['properties'] as Array<any>).map(PropertyRequestFromJSON)),
        'propertiesFoodAmount': json['properties_food_amount'] == null ? undefined : json['properties_food_amount'],
        'propertiesFoodUnit': json['properties_food_unit'] == null ? undefined : UnitRequestFromJSON(json['properties_food_unit']),
        'fdcId': json['fdc_id'] == null ? undefined : json['fdc_id'],
        'foodOnhand': json['food_onhand'] == null ? undefined : json['food_onhand'],
        'supermarketCategory': json['supermarket_category'] == null ? undefined : SupermarketCategoryRequestFromJSON(json['supermarket_category']),
        'inheritFields': json['inherit_fields'] == null ? undefined : ((json['inherit_fields'] as Array<any>).map(FoodInheritFieldRequestFromJSON)),
        'ignoreShopping': json['ignore_shopping'] == null ? undefined : json['ignore_shopping'],
        'substitute': json['substitute'] == null ? undefined : ((json['substitute'] as Array<any>).map(FoodSimpleRequestFromJSON)),
        'substituteSiblings': json['substitute_siblings'] == null ? undefined : json['substitute_siblings'],
        'substituteChildren': json['substitute_children'] == null ? undefined : json['substitute_children'],
        'childInheritFields': json['child_inherit_fields'] == null ? undefined : ((json['child_inherit_fields'] as Array<any>).map(FoodInheritFieldRequestFromJSON)),
        'openDataSlug': json['open_data_slug'] == null ? undefined : json['open_data_slug'],
    };
}

export function PatchedFoodRequestToJSON(value?: PatchedFoodRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'plural_name': value['pluralName'],
        'description': value['description'],
        'recipe': RecipeSimpleRequestToJSON(value['recipe']),
        'url': value['url'],
        'properties': value['properties'] == null ? undefined : ((value['properties'] as Array<any>).map(PropertyRequestToJSON)),
        'properties_food_amount': value['propertiesFoodAmount'],
        'properties_food_unit': UnitRequestToJSON(value['propertiesFoodUnit']),
        'fdc_id': value['fdcId'],
        'food_onhand': value['foodOnhand'],
        'supermarket_category': SupermarketCategoryRequestToJSON(value['supermarketCategory']),
        'inherit_fields': value['inheritFields'] == null ? undefined : ((value['inheritFields'] as Array<any>).map(FoodInheritFieldRequestToJSON)),
        'ignore_shopping': value['ignoreShopping'],
        'substitute': value['substitute'] == null ? undefined : ((value['substitute'] as Array<any>).map(FoodSimpleRequestToJSON)),
        'substitute_siblings': value['substituteSiblings'],
        'substitute_children': value['substituteChildren'],
        'child_inherit_fields': value['childInheritFields'] == null ? undefined : ((value['childInheritFields'] as Array<any>).map(FoodInheritFieldRequestToJSON)),
        'open_data_slug': value['openDataSlug'],
    };
}

