/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OpenDataFood } from './OpenDataFood';
import {
    OpenDataFoodFromJSON,
    OpenDataFoodFromJSONTyped,
    OpenDataFoodToJSON,
} from './OpenDataFood';
import type { OpenDataUnit } from './OpenDataUnit';
import {
    OpenDataUnitFromJSON,
    OpenDataUnitFromJSONTyped,
    OpenDataUnitToJSON,
} from './OpenDataUnit';
import type { OpenDataVersion } from './OpenDataVersion';
import {
    OpenDataVersionFromJSON,
    OpenDataVersionFromJSONTyped,
    OpenDataVersionToJSON,
} from './OpenDataVersion';

/**
 * Adds nested create feature
 * @export
 * @interface OpenDataConversion
 */
export interface OpenDataConversion {
    /**
     * 
     * @type {number}
     * @memberof OpenDataConversion
     */
    readonly id: number;
    /**
     * 
     * @type {OpenDataVersion}
     * @memberof OpenDataConversion
     */
    version: OpenDataVersion;
    /**
     * 
     * @type {string}
     * @memberof OpenDataConversion
     */
    slug: string;
    /**
     * 
     * @type {OpenDataFood}
     * @memberof OpenDataConversion
     */
    food: OpenDataFood;
    /**
     * 
     * @type {string}
     * @memberof OpenDataConversion
     */
    baseAmount: string;
    /**
     * 
     * @type {OpenDataUnit}
     * @memberof OpenDataConversion
     */
    baseUnit: OpenDataUnit;
    /**
     * 
     * @type {string}
     * @memberof OpenDataConversion
     */
    convertedAmount: string;
    /**
     * 
     * @type {OpenDataUnit}
     * @memberof OpenDataConversion
     */
    convertedUnit: OpenDataUnit;
    /**
     * 
     * @type {string}
     * @memberof OpenDataConversion
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof OpenDataConversion
     */
    comment?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenDataConversion
     */
    readonly createdBy: string;
}

/**
 * Check if a given object implements the OpenDataConversion interface.
 */
export function instanceOfOpenDataConversion(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "food" in value;
    isInstance = isInstance && "baseAmount" in value;
    isInstance = isInstance && "baseUnit" in value;
    isInstance = isInstance && "convertedAmount" in value;
    isInstance = isInstance && "convertedUnit" in value;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "createdBy" in value;

    return isInstance;
}

export function OpenDataConversionFromJSON(json: any): OpenDataConversion {
    return OpenDataConversionFromJSONTyped(json, false);
}

export function OpenDataConversionFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenDataConversion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'version': OpenDataVersionFromJSON(json['version']),
        'slug': json['slug'],
        'food': OpenDataFoodFromJSON(json['food']),
        'baseAmount': json['base_amount'],
        'baseUnit': OpenDataUnitFromJSON(json['base_unit']),
        'convertedAmount': json['converted_amount'],
        'convertedUnit': OpenDataUnitFromJSON(json['converted_unit']),
        'source': json['source'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'createdBy': json['created_by'],
    };
}

export function OpenDataConversionToJSON(value?: OpenDataConversion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': OpenDataVersionToJSON(value.version),
        'slug': value.slug,
        'food': OpenDataFoodToJSON(value.food),
        'base_amount': value.baseAmount,
        'base_unit': OpenDataUnitToJSON(value.baseUnit),
        'converted_amount': value.convertedAmount,
        'converted_unit': OpenDataUnitToJSON(value.convertedUnit),
        'source': value.source,
        'comment': value.comment,
    };
}

