/* tslint:disable */
/* eslint-disable */
/**
 * Tandoor
 * Tandoor API Docs
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { KeywordRequest } from './KeywordRequest';
import {
    KeywordRequestFromJSON,
    KeywordRequestFromJSONTyped,
    KeywordRequestToJSON,
} from './KeywordRequest';
import type { NutritionInformationRequest } from './NutritionInformationRequest';
import {
    NutritionInformationRequestFromJSON,
    NutritionInformationRequestFromJSONTyped,
    NutritionInformationRequestToJSON,
} from './NutritionInformationRequest';
import type { PropertyRequest } from './PropertyRequest';
import {
    PropertyRequestFromJSON,
    PropertyRequestFromJSONTyped,
    PropertyRequestToJSON,
} from './PropertyRequest';
import type { StepRequest } from './StepRequest';
import {
    StepRequestFromJSON,
    StepRequestFromJSONTyped,
    StepRequestToJSON,
} from './StepRequest';
import type { UserRequest } from './UserRequest';
import {
    UserRequestFromJSON,
    UserRequestFromJSONTyped,
    UserRequestToJSON,
} from './UserRequest';

/**
 * Adds nested create feature
 * @export
 * @interface RecipeRequest
 */
export interface RecipeRequest {
    /**
     * 
     * @type {string}
     * @memberof RecipeRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RecipeRequest
     */
    description?: string;
    /**
     * 
     * @type {Array<KeywordRequest>}
     * @memberof RecipeRequest
     */
    keywords?: Array<KeywordRequest>;
    /**
     * 
     * @type {Array<StepRequest>}
     * @memberof RecipeRequest
     */
    steps: Array<StepRequest>;
    /**
     * 
     * @type {number}
     * @memberof RecipeRequest
     */
    workingTime?: number;
    /**
     * 
     * @type {number}
     * @memberof RecipeRequest
     */
    waitingTime?: number;
    /**
     * 
     * @type {string}
     * @memberof RecipeRequest
     */
    sourceUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RecipeRequest
     */
    internal?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RecipeRequest
     */
    showIngredientOverview?: boolean;
    /**
     * 
     * @type {NutritionInformationRequest}
     * @memberof RecipeRequest
     */
    nutrition?: NutritionInformationRequest;
    /**
     * 
     * @type {Array<PropertyRequest>}
     * @memberof RecipeRequest
     */
    properties?: Array<PropertyRequest>;
    /**
     * 
     * @type {number}
     * @memberof RecipeRequest
     */
    servings?: number;
    /**
     * 
     * @type {string}
     * @memberof RecipeRequest
     */
    filePath?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipeRequest
     */
    servingsText?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RecipeRequest
     */
    _private?: boolean;
    /**
     * 
     * @type {Array<UserRequest>}
     * @memberof RecipeRequest
     */
    shared?: Array<UserRequest>;
    /**
     * 
     * @type {number}
     * @memberof RecipeRequest
     */
    id?: number;
}

/**
 * Check if a given object implements the RecipeRequest interface.
 */
export function instanceOfRecipeRequest(value: object): boolean {
    if (!('name' in value)) return false;
    if (!('steps' in value)) return false;
    return true;
}

export function RecipeRequestFromJSON(json: any): RecipeRequest {
    return RecipeRequestFromJSONTyped(json, false);
}

export function RecipeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecipeRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'keywords': json['keywords'] == null ? undefined : ((json['keywords'] as Array<any>).map(KeywordRequestFromJSON)),
        'steps': ((json['steps'] as Array<any>).map(StepRequestFromJSON)),
        'workingTime': json['working_time'] == null ? undefined : json['working_time'],
        'waitingTime': json['waiting_time'] == null ? undefined : json['waiting_time'],
        'sourceUrl': json['source_url'] == null ? undefined : json['source_url'],
        'internal': json['internal'] == null ? undefined : json['internal'],
        'showIngredientOverview': json['show_ingredient_overview'] == null ? undefined : json['show_ingredient_overview'],
        'nutrition': json['nutrition'] == null ? undefined : NutritionInformationRequestFromJSON(json['nutrition']),
        'properties': json['properties'] == null ? undefined : ((json['properties'] as Array<any>).map(PropertyRequestFromJSON)),
        'servings': json['servings'] == null ? undefined : json['servings'],
        'filePath': json['file_path'] == null ? undefined : json['file_path'],
        'servingsText': json['servings_text'] == null ? undefined : json['servings_text'],
        '_private': json['private'] == null ? undefined : json['private'],
        'shared': json['shared'] == null ? undefined : ((json['shared'] as Array<any>).map(UserRequestFromJSON)),
        'id': json['id'] == null ? undefined : json['id'],
    };
}

export function RecipeRequestToJSON(value?: RecipeRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'description': value['description'],
        'keywords': value['keywords'] == null ? undefined : ((value['keywords'] as Array<any>).map(KeywordRequestToJSON)),
        'steps': ((value['steps'] as Array<any>).map(StepRequestToJSON)),
        'working_time': value['workingTime'],
        'waiting_time': value['waitingTime'],
        'source_url': value['sourceUrl'],
        'internal': value['internal'],
        'show_ingredient_overview': value['showIngredientOverview'],
        'nutrition': NutritionInformationRequestToJSON(value['nutrition']),
        'properties': value['properties'] == null ? undefined : ((value['properties'] as Array<any>).map(PropertyRequestToJSON)),
        'servings': value['servings'],
        'file_path': value['filePath'],
        'servings_text': value['servingsText'],
        'private': value['_private'],
        'shared': value['shared'] == null ? undefined : ((value['shared'] as Array<any>).map(UserRequestToJSON)),
        'id': value['id'],
    };
}

